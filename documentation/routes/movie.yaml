components:
  $ref: ../components/security/security.yaml

paths:
  /api/movies:
    post:
      security:
        - Authorization: [] # use the same name as above
      summary: Create a Movie
      tags:
        - Movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "201":
          description: Movie created -> Get object Movie.
        "400":
          description: Invalid argument.
        "403":
          description: Forbidden access!
        "409":
          description: Movie is already registered.
        "422":
          description: Invalid format.
        "500":
          description: Email and password are required.
    get:
      security:
        - Authorization: [] # Se requiere un token de autenticación Bearer
      summary: Get the name and image of each movie.
      tags:
        - Movies
      requestBody:
        required: false
      responses:
        "200":
          description: Get all the Movies.
        "401":
          description: Invalid credentials!
        "403":
          description: Forbidden access!
        "500":
          description: Email and password are required.
  /api/movies/{id}:
    put:
      security:
        - Authorization: [] # Se requiere un token de autenticación Bearer
      summary: Update a movie.
      tags:
        - Movies
      parameters:
        - in: path
          name: id
          description: ID of the movie to update
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "200":
          description: Movie updated successfully.
        "400":
          description: Invalid argument.
        "403":
          description: Forbidden access!
        "404":
          description: Movie not found. Not found ID!
        "422":
          description: Invalid format!
        "500":
          description: Internal server error.
    delete:
      security:
        - Authorization: [] # Se requiere un token de autenticación Bearer
      summary: Delete a movie.
      tags:
        - Movies
      parameters:
        - in: path
          name: id
          description: ID of the movie to delete
          required: true
          schema:
            type: string
      requestBody:
        required: false
      responses:
        "200":
          description: Deleted.
        "400":
          description: Invalid argument. Nothing was deleted!
        "401":
          description: Invalid credentials!
        "403":
          description: Forbidden access!
        "404":
          description: Movie not found. Not found ID!
        "500":
          description: Internal server error.
  /api/movies/{id}/character:
    post:
      security:
        - Authorization: [] # Se requiere un token de autenticación Bearer
      summary: Update a movie
      tags:
        - Movies
      parameters:
        - in: path
          name: id
          description: ID of the movie to which you are going to add a character
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                idC:
                  type: string
                  description: ID of the character to add in the movie.
              required:
                - idC # id of character
      responses:
        "200":
          description: Character updated successfully.
        "400":
          description: Invalid argument.
        "403":
          description: Forbidden access!
        "404":
          description: Character/Movie not found. Not found ID!
        "500":
          description: Internal server error.
    get:
      security:
        - Authorization: [] # Se requiere un token de autenticación Bearer
      summary: Delete a character
      tags:
        - Movies
      parameters:
        - in: path
          name: id
          description: ID of the character to delete
          required: true
          schema:
            type: string
      requestBody:
        required: false
      responses:
        "200":
          description: User token.
        "400":
          description: Invalid argument. Nothing was deleted!
        "401":
          description: Invalid credentials!
        "403":
          description: Forbidden access!
        "500":
          description: Internal server error.
  /api/movies/filter:
    get:
      security:
        - Authorization: [] # Se requiere un token de autenticación Bearer
      summary: Get movies, you can filter by genre and sort in increasing or decreasing order
      tags:
        - Movies
      parameters:
        - in: query
          name: title
          description: The title of the movies you want to filter.
          required: true
          schema:
            type: string
        - in: query
          name: genre
          description: The genre of the movies you want to filter.
          schema:
            type: string
            nullable: true
        - in: query
          name: order
          description: The order of the movies you want to filter. increasing / decreasing.
          schema:
            type: string
            nullable: true
      requestBody:
        required: false
      responses:
        "200":
          description: Character updated successfully.
        "400":
          description: Invalid argument.
        "403":
          description: Forbidden access!
        "404":
          description: Character not found. Not found ID!
        "500":
          description: Internal server error.
